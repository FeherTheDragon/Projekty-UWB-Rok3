import java.awt.Color;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;

public class Zad4 extends Thread {
    final static int N = 4096;
    final static int CUTOFF = 100;
    static int[][] set = new int[N][N];

    public static void main(String[] args) throws Exception {

// Calculate set
        long startTime = System.currentTimeMillis();
        Zad4 thread0 = new Zad4(0);
        Zad4 thread1 = new Zad4(1);
        Zad4 thread2 = new Zad4(2);
        Zad4 thread3 = new Zad4(3);
        thread0.start();
        thread1.start();
        thread2.start();
        thread3.start();
        thread0.join();
        thread1.join();
        thread2.join();
        thread3.join();
        long endTime = System.currentTimeMillis();
        System.out.println("Obliczenia zakończone w czasie " + (endTime - startTime) + " millisekund");

// wyświetlanie rusunku
        BufferedImage img = new BufferedImage(N, N, BufferedImage.TYPE_INT_ARGB);

// Rysowanie pixeli
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                float k = set[i][j];
                float level;
                if (k < CUTOFF) {
                    level = (float) k / CUTOFF;
                } else {
                    level = 0;
                }
                int c = Color.HSBtoRGB((level) % 1, 1, k > 0 ? 1 : 0);
                img.setRGB(i, j, c);
            }
        }

// zapis do pliku
        ImageIO.write(img, "PNG", new File("Julia.png"));
    }

    int me;

    public Zad4(int me) {
        this.me = me;
    }

    public void run() {
        int begin = 0, end = 0;
        if (me == 0) {
            begin = 0;
            end = (N / 4) * 1;
        }
        else if (me == 1) {
            begin = (N / 4) * 1;
            end = (N / 4) * 2;
        }
        else if (me == 2) {
            begin = (N / 4) * 2;
            end = (N / 4) * 3;
        }
        else if (me == 3) {
            begin = (N / 4) * 3;
            end = N;
        }

        for (int i = begin; i < end; i++) {
            for (int j = 0; j < N; j++) {
                double cr = 1.5 * (i - N / 2) / (0.5 * N);
                double ci = (j - N / 2) / (0.5 * N);
                double zr = cr, zi = ci;
                int k = 0;
                while (k < CUTOFF && zr * zr + zi * zi < 4.0) {
                    double newr = zr * zr - zi * zi + -0.73;
                    double newi = 2.0 * zr * zi + 0.19;
                    zr = newr;
                    zi = newi;
                    k++;
                }
                set[i][j] = k;
            }
        }
    }
}